# 입력과 출력
print(1+1)
print("멋쟁이 사자처럼") #상수 예시 : 변할 여지가 전혀 없음

number = 2 #변수 : 변할 여지가 가득한 값.
print(number + 1)

banjang = "김아영"
print("우리반 반장 이름은", banjang)

banjang = input("반장의 이름을 입력하세요 : ")
print("우리반 반장 이름은", banjang)

number1 = input("첫번째 숫자를 입력하세요 : ")
number2 = input("두번째 숫자를 입력하세요 : ")
print(number1 + number2) #컴퓨터가 두개를 문자로 인식해서 그냥 하나의 문자열이 되어서 출력되어버림!

number1 = int(input("첫번째 숫자를 입력하세요 : "))
number2 = int(input("두번째 숫자를 입력하세요 : "))
print(number1 + number2) #자료형 변환되어서 숫자로 연산한 결과가 출력됨.
'''
# 자료형[1]
[학습목표] 자료형의 존재이유를 알아본다.
프로그래밍하기 좋은 컴퓨터를 만든다고 상상해보자.
프로그래밍 = 컴퓨터에 나의 의사를 전달하는 일
So, 프로그래밍하기 좋은 컴퓨터란 내 말을 빠르고 정확하게 알아듣는 컴퓨터

Q. 잘 알아듣게 하려면?
A. 우리의 생각 체계를 투영해보기
: 자기가 알아서 데이터의 형태를 분류하고 처리할 수 있는 컴퓨터
: 하지만 컴퓨터는 궁예가 아님. ^^ 오히려 속도만 빠른 핑프!;;
: 잘 알아듣게 만들었다고 해도, 컴퓨터가 처리할 일이 너무 많아짐.
: 일일이 계속, 계속 처리해야하니까 속도는 느려짐. 
: 그래서 우리가 그냥 해주기로 함^^ - 자료형 등장!

Q. 데이터 종류를 어떻게 분류할까?
A. 초기 컴퓨터는 숫자와 문자로만 구분함. 
: 문자 숫자로만 명령을 내리다보니 속도도 빠르고 나름 괜찮았음
: 파이썬은 한 단계 더 나감 - 데이터 관리를 위한 자료형을 만듦.
: 형태 구분을 넘어 속성 구분까지 나아감!! - 리스트 자료형 등
: 파이썬의 자료형 = 종류 구분용(숫자, 문자) / 관리용(집합, 리스트, 딕셔너리, 튜플 등)
'''
# 자료형[2] - 숫자와 문자열
'''
[학습목표] 숫자형과 문자형 자료형에 대해 설명할 수 있다.
숫자형 자료형 : 정수형, 실수형
'''
# 주석 : 사용자만 읽을 수 있게 작성한 코드
# 추후에 확인할 때, 협업할 때 활용
# 컴퓨터는 실행할 때 주석을 무시하고 진행한다.

# 숫자형
# 정수형 int (integer의 준말)
num1 = int(input("여기에 첫번째 정수를 입력하세요 : "))
num2 = int(input("여기에 두번째 정수를 입력하세요 : "))
print(num1 + num2) # 덧셈
print(num1 - num2) # 뺄셈
print(num1 * num2) # 곱셈
print(num1 // num2) # 나눗셈 - 몫
print(num1 % num2) # 나눗셈 - 나머지
print(num1 / num2) # 나눗셈 - 몫 + 나머지
print(num1 ** num2) # 거듭제곱
# 실수형 float
num3 = float(input("여기에 첫번째 실수를 입력하세요 : "))
num4 = float(input("여기에 두번째 실수를 입력하세요 : "))
print(num3 + num4) # 덧셈
print(num3 - num4) # 뺄셈
print(num3 * num4) # 곱셈
print(num3 // num4) # 나눗셈 - 몫
print(num3 % num4) # 나눗셈 - 나머지
print(num3 / num4) # 나눗셈 - 몫 + 나머지
print(num3 ** num4) # 거듭제곱
'''
# 자료형[2] - 문자형
단일 문자 + 여러 글자(문자열)
따옴표로 감싸야함
덧셈과 곱셈같은 연산도 가능하지만, 더 중요한 것은 이 문자들을 어떻게 다룰 것인가 하는 문제!
왜냐하면, 문자열은 정보를 위해 가공하여 사용하는 경우가 더 많기 때문.
'''
# 문자열의 연산
# 덧셈 :  두 문자열 이어붙이기
print("I'm " + "hungry")
# 곱셈 : 해당 수 만큼 문자열을 반복
print("으악"*3)
'''
# 문자열을 효율적으로 다루는 방법은 무엇일까?

문자열은 공통적으로 문자 하나하나가 나란히 열거되어 이어진 형태다.
Q. 능수능란하게 접근하거나, 관리를 편리하게 하려면?
A. 문자열의 특성을 이용해, 문자 각각에 순서 번호를 붙이면 편리해진다!
: 그리고 이런한 순서 번호를 인덱스라고 부른다.
인덱스는 0번부터 시작하여 문자열을 구성하는 특정 문자에 대한 위치정보를 나타내기도 한다.

# 문자형 다루기 방법 - 인덱싱 / 슬라이싱

# 인덱싱 
: 문자형변수[인덱스번호] = 인덱스 번호번째 문자. 
: 음수 인덱스의 경우, 가장 끝에서부터 찾아옴.

# 슬라이싱 
: 여러개의 문자에 범위로 접근하는 방법
: 문자형 변수[시작인덱스부터:끝인덱스 전까지]
: 따라서 만약 0번부터 2번 전까지면 0번 1번만 출력하는 것.

# 자료형[3] - 리스트,튜플,딕셔너리

[학습목표] 리스트, 튜플, 딕셔너리에 대해 알고, 등장 이유와 활용 상황, 방법을 안다.

# 리스트 자료형
: 산발적으로 흩어진 변할 수도 있는 데이터들을 나란히 묶어주는 자료형 ex) 성적
: 문자열과 친구!이므로 곱셈, 덧셈, 인덱싱, 슬라이싱 가능
: 리스트 곱셈 ) 곱하는 수 만큼 원소 반복
: 리스트 덧셈 ) 리스트 이어붙이기

# 튜플 자료형
: 변할 수 없는, 또는 변하면 안 되는 산발적 데이터들을 나란히 묶어주는 자료형
: 리스트와 가족! 리스트는 대괄호, 튜플은 소괄호!

# 딕셔너리(해쉬) 자료형
: 세상에서 제일 중요
: 등장 배경 ) 대응이 되는 데이터를 표현해주고 싶다는 욕망
: 대응이 되는 데이터를 묶어주는 자료형 (2 * n짜리 표로 대응하는 데이터)
: 왜 딕셔너리라고 부르는가? ) 탐색의 기준을 찾으면 대응되는 단어를 찾을 수 있는 사전이
대응되는 데이터를 표현하는 대표적 예시이기 때문!
: key(탐색의 기준, 키워드) - value(기준에 대응되는 값, 찾고자 하는 값)는 일대일대응!
: {key1 : val1, key2 : val2, ...}
: key는 중복, 변형을 허용하지 않음
: 딕셔너리를 활용하는 방법 ) key를 통해 value 얻기 = 딕셔너리를 key로 인덱싱하기
'''